{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Estado } from '../models/Estado';\nlet BoardComponent = class BoardComponent {\n  constructor(cellService, dificultadService) {\n    this.cellService = cellService;\n    this.dificultadService = dificultadService;\n    this.board = [];\n    this.gameState = Estado.activo;\n    this.difficulty = '';\n    this.rows = 5;\n    this.columns = 5;\n    this.numberOfMines = 0;\n    this.difficulty = \"Facil\";\n    this.celdas = {\n      cellsOpened: 0,\n      cells: this.rows * this.columns,\n      numberMines: this.numberOfMines\n    };\n    this.changeDifficulty();\n    console.log(this.difficulty);\n  }\n  ngOnInit() {\n    this.dificultadService.dificultadSeleccionada$.subscribe(dificultad => {\n      this.difficulty = dificultad; // Recibe la dificultad seleccionada del servicio\n      console.log(this.difficulty);\n      this.changeDifficulty(); // Llama a la función para cambiar la dificultad cuando se recibe una nueva\n    });\n  }\n\n  checkCell(row, column) {\n    this.cellService.abrirCelda(this.board, row, column, this.rows, this.columns, this.celdas);\n    this.gameState = this.cellService.cambiarEstado(this.board, row, column, this.celdas, this.numberOfMines, this.gameState);\n  }\n  reiniciar() {\n    this.board = this.cellService.generarTablero(this.rows, this.columns, this.numberOfMines);\n    this.gameState = Estado.activo;\n    this.celdas = {\n      cellsOpened: 0,\n      cells: this.rows * this.columns,\n      numberMines: this.numberOfMines\n    };\n  }\n  changeDifficulty() {\n    let changes = this.cellService.Dificultad(this.difficulty);\n    this.rows = changes[0];\n    this.columns = changes[1];\n    this.numberOfMines = changes[2];\n    this.reiniciar();\n  }\n};\nBoardComponent = __decorate([Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})], BoardComponent);\nexport { BoardComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAIjD,SAASC,MAAM,QAAQ,kBAAkB;AAOlC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAUzBC,YACUC,WAAwB,EACxBC,iBAAoC;IADpC,gBAAW,GAAXD,WAAW;IACX,sBAAiB,GAAjBC,iBAAiB;IAX3B,UAAK,GAAgB,EAAE;IACvB,cAAS,GAAWJ,MAAM,CAACK,MAAM;IACjC,eAAU,GAAW,EAAE;IAWrB,IAAI,CAACC,IAAI,GAAE,CAAC;IACZ,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,UAAU,GAAG,OAAO;IACzB,IAAI,CAACC,MAAM,GAAG;MAACC,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE,IAAI,CAACN,IAAI,GAAG,IAAI,CAACC,OAAO;MAAEM,WAAW,EAAE,IAAI,CAACL;IAAa,CAAC;IAChG,IAAI,CAACM,gBAAgB,EAAE;IACvBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,UAAU,CAAC;EAC9B;EAEAQ,QAAQ;IACN,IAAI,CAACb,iBAAiB,CAACc,uBAAuB,CAACC,SAAS,CAACC,UAAU,IAAG;MACpE,IAAI,CAACX,UAAU,GAAGW,UAAU,CAAC,CAAC;MAC9BL,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,UAAU,CAAC;MAC5B,IAAI,CAACK,gBAAgB,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC;EACJ;;EAEAO,SAAS,CAACC,GAAW,EAAEC,MAAc;IACnC,IAAI,CAACpB,WAAW,CAACqB,UAAU,CAAC,IAAI,CAACC,KAAK,EAAEH,GAAG,EAAEC,MAAM,EAAE,IAAI,CAACjB,IAAI,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACG,MAAM,CAAC;IAC1F,IAAI,CAACgB,SAAS,GAAG,IAAI,CAACvB,WAAW,CAACwB,aAAa,CAAC,IAAI,CAACF,KAAK,EAAEH,GAAG,EAAEC,MAAM,EAAE,IAAI,CAACb,MAAM,EAAE,IAAI,CAACF,aAAa,EAAE,IAAI,CAACkB,SAAS,CAAC;EAC3H;EAEAE,SAAS;IACP,IAAI,CAACH,KAAK,GAAG,IAAI,CAACtB,WAAW,CAAC0B,cAAc,CAAC,IAAI,CAACvB,IAAI,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,aAAa,CAAC;IACzF,IAAI,CAACkB,SAAS,GAAG1B,MAAM,CAACK,MAAM;IAC9B,IAAI,CAACK,MAAM,GAAG;MAAEC,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE,IAAI,CAACN,IAAI,GAAG,IAAI,CAACC,OAAO;MAAEM,WAAW,EAAE,IAAI,CAACL;IAAa,CAAE;EACpG;EAEAM,gBAAgB;IACd,IAAIgB,OAAO,GAA6B,IAAI,CAAC3B,WAAW,CAAC4B,UAAU,CAAC,IAAI,CAACtB,UAAU,CAAC;IACpF,IAAI,CAACH,IAAI,GAAGwB,OAAO,CAAC,CAAC,CAAC;IACtB,IAAI,CAACvB,OAAO,GAAGuB,OAAO,CAAC,CAAC,CAAC;IACzB,IAAI,CAACtB,aAAa,GAAGsB,OAAO,CAAC,CAAC,CAAC;IAC/B,IAAI,CAACF,SAAS,EAAE;EAClB;CACD;AAjDY3B,cAAc,eAL1BF,SAAS,CAAC;EACTiC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWjC,cAAc,CAiD1B;SAjDYA,cAAc","names":["Component","Estado","BoardComponent","constructor","cellService","dificultadService","activo","rows","columns","numberOfMines","difficulty","celdas","cellsOpened","cells","numberMines","changeDifficulty","console","log","ngOnInit","dificultadSeleccionada$","subscribe","dificultad","checkCell","row","column","abrirCelda","board","gameState","cambiarEstado","reiniciar","generarTablero","changes","Dificultad","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\Diky\\Desktop\\Programacio II\\Buscaminas\\src\\app\\board\\board.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { DificultadService } from '../services/dificultad.service';\r\nimport { Casilla } from '../models/Casilla';\r\nimport { CasillaService } from '../services/casilla.service';\r\nimport { Estado } from '../models/Estado';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\nexport class BoardComponent implements OnInit {\r\n  board: Casilla[][] = [];\r\n  gameState: Estado = Estado.activo;\r\n  difficulty: string = '';\r\n\r\n  rows: number;\r\n  columns: number;\r\n  numberOfMines: number;\r\n  celdas: any;\r\n\r\n  constructor(\r\n    private cellService: CellService,\r\n    private dificultadService: DificultadService\r\n  ) {\r\n    this.rows= 5;\r\n    this.columns = 5;\r\n    this.numberOfMines = 0;\r\n    this.difficulty = \"Facil\";\r\n    this.celdas = {cellsOpened: 0, cells: this.rows * this.columns, numberMines: this.numberOfMines};\r\n    this.changeDifficulty();\r\n    console.log(this.difficulty);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.dificultadService.dificultadSeleccionada$.subscribe(dificultad => {\r\n      this.difficulty = dificultad; // Recibe la dificultad seleccionada del servicio\r\n      console.log(this.difficulty);\r\n      this.changeDifficulty(); // Llama a la función para cambiar la dificultad cuando se recibe una nueva\r\n    });\r\n  }\r\n\r\n  checkCell(row: number, column: number) {\r\n    this.cellService.abrirCelda(this.board, row, column, this.rows, this.columns, this.celdas);\r\n    this.gameState = this.cellService.cambiarEstado(this.board, row, column, this.celdas, this.numberOfMines, this.gameState);\r\n  }\r\n\r\n  reiniciar() {\r\n    this.board = this.cellService.generarTablero(this.rows, this.columns, this.numberOfMines);\r\n    this.gameState = Estado.activo;\r\n    this.celdas = { cellsOpened: 0, cells: this.rows * this.columns, numberMines: this.numberOfMines };\r\n  }\r\n\r\n  changeDifficulty() {\r\n    let changes: [number, number, number] = this.cellService.Dificultad(this.difficulty);\r\n    this.rows = changes[0];\r\n    this.columns = changes[1];\r\n    this.numberOfMines = changes[2];\r\n    this.reiniciar();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}