{"ast":null,"code":"import { GameState } from \"../models/Game.enum\";\nexport class CellService {\n  buildBoard(filas, columnas, minas) {\n    let tablero = [];\n    for (let i = 0; i < filas; i++) {\n      let fila = [];\n      for (let j = 0; j < columnas; j++) {\n        let celda = {\n          status: 'toOpen',\n          mina: false,\n          minasAlrededor: 0\n        };\n        fila.push(celda);\n      }\n      tablero.push(fila);\n    }\n    this.putMines(minas, tablero, filas, columnas);\n    this.GetMineProximity(tablero, filas, columnas);\n    return tablero;\n  }\n  putMines(minas, tablero, filas, columnas) {\n    let set = new Set();\n    let i;\n    for (i = 0; i < minas; i++) {\n      let pairs = [Math.floor(Math.random() * filas), Math.floor(Math.random() * columnas)];\n      if (!set.has(pairs) && !tablero[pairs[0]][pairs[1]].mina) {\n        set.add(pairs);\n        tablero[pairs[0]][pairs[1]].mina = true;\n      }\n    }\n    return tablero;\n  }\n  GetMineProximity(tablero, filas, columnas) {\n    let Casillas = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (let i = 0; i < filas; i++) {\n      for (let j = 0; j < columnas; j++) {\n        let numMinas = 0;\n        for (const casilla of Casillas) {\n          if (!this.validarRango(i + casilla[0], j + casilla[1], filas, columnas)) {\n            continue;\n          }\n          if (tablero[i + casilla[0]][j + casilla[1]].mina) {\n            numMinas++;\n          }\n        }\n        tablero[i][j].minasAlrededor = numMinas;\n      }\n    }\n    return tablero;\n  }\n  cellStatus(board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j].mina) {\n          board[i][j].status = 'mine';\n        }\n      }\n    }\n  }\n  changeDifficulty(difficulty) {\n    let rows,\n      columns = 5;\n    let numberOfMines = 1;\n    if (difficulty == \"Easy\") {\n      rows = columns = 8;\n      numberOfMines = 10;\n    } else if (difficulty == \"Medium\") {\n      rows = columns = 13;\n      numberOfMines = 20;\n    } else if (difficulty == \"Hard\") {\n      rows = columns = 15;\n      numberOfMines = 40;\n    } else {\n      rows = columns = 15;\n      numberOfMines = 90;\n    }\n    return [rows, columns, numberOfMines];\n  }\n  getDifficultys() {\n    return [\"Easy\", \"Medium\", \"Hard\", \"Extreme\"];\n  }\n  checkCell(board, row, column, cellsGame, numberOfMines, gameEstate) {\n    if (board[row][column].mina) {\n      board[row][column].status = 'mine';\n      this.cellStatus(board);\n      return GameState.lose;\n    } else if (cellsGame.cellsOpened >= cellsGame.cells - cellsGame.numberMines) {\n      return GameState.win;\n    }\n    return GameState.playing;\n  }\n  validarRango(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  openCell(tablero, fila, columna, filas, columnas, casillas) {\n    if (!this.validarRango(fila, columna, filas, columnas) || tablero[fila][columna].status == 'open' || tablero[fila][columna].mina) {\n      return;\n    } else if (tablero[fila][columna].minasAlrededor != 0) {\n      tablero[fila][columna].status = 'open';\n      casillas.cellsOpened += 1;\n    } else if (tablero[fila][columna].minasAlrededor == 0) {\n      tablero[fila][columna].status = 'open';\n      casillas.cellsOpened += 1;\n      this.openCell(tablero, fila + 1, columna, filas, columnas, casillas);\n      this.openCell(tablero, fila, columna + 1, filas, columnas, casillas);\n      this.openCell(tablero, fila - 1, columna, filas, columnas, casillas);\n      this.openCell(tablero, fila, columna - 1, filas, columnas, casillas);\n      this.openCell(tablero, fila + 1, columna + 1, filas, columnas, casillas);\n      this.openCell(tablero, fila + 1, columna - 1, filas, columnas, casillas);\n      this.openCell(tablero, fila - 1, columna - 1, filas, columnas, casillas);\n      this.openCell(tablero, fila - 1, columna + 1, filas, columnas, casillas);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["GameState","CellService","buildBoard","filas","columnas","minas","tablero","i","fila","j","celda","status","mina","minasAlrededor","push","putMines","GetMineProximity","set","Set","pairs","Math","floor","random","has","add","Casillas","numMinas","casilla","validarRango","cellStatus","board","length","changeDifficulty","difficulty","rows","columns","numberOfMines","getDifficultys","checkCell","row","column","cellsGame","gameEstate","lose","cellsOpened","cells","numberMines","win","playing","openCell","columna","casillas"],"sourceRoot":"","sources":["F:\\Diky\\Desktop\\Programacio II\\Buscaminas\\src\\app\\services\\Cell.service.ts"],"sourcesContent":["import { Cell } from \"../models/Cell\";\r\nimport { GameState } from \"../models/Game.enum\";\r\n\r\n\r\nexport class CellService{\r\n\r\n    buildBoard(filas: number, columnas: number, minas: number) : Cell[][]{\r\n\r\n        let tablero: Cell[][] = []\r\n        for(let i = 0; i < filas; i++){\r\n            let fila: Cell[] = [];\r\n            for(let j = 0; j < columnas; j++){\r\n              let celda: Cell = {status: 'toOpen', mina: false, minasAlrededor: 0};\r\n              fila.push(celda);\r\n            }\r\n            tablero.push(fila);\r\n        }\r\n\r\n\r\n        this.putMines(minas, tablero, filas, columnas);\r\n        this.GetMineProximity(tablero, filas, columnas);\r\n\r\n        return tablero;\r\n    }\r\n\r\n\r\n    putMines(minas: number, tablero: Cell[][], filas: number, columnas: number) : Cell[][]{\r\n        let set = new Set<([number, number])>;\r\n        let i: number;\r\n        for(i = 0; i < minas; i++){\r\n            let pairs: [number, number] = [Math.floor(Math.random() * (filas)), Math.floor(Math.random() * (columnas))];\r\n\r\n            if(!set.has(pairs) && !tablero[pairs[0]][pairs[1]].mina){\r\n                set.add(pairs);\r\n                tablero[pairs[0]][pairs[1]].mina = true;\r\n            }\r\n        }\r\n        return tablero;\r\n    }\r\n\r\n\r\n    GetMineProximity(tablero: Cell[][], filas: number, columnas: number) : Cell[][]{\r\n        \r\n        let Casillas: number[][] = [ [1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1] ];\r\n        \r\n        for(let i = 0; i < filas; i++){\r\n            for(let j = 0; j < columnas; j++){\r\n                let numMinas: number = 0;\r\n                for(const casilla of Casillas){\r\n                    if(!this.validarRango(i + casilla[0], j + casilla[1], filas, columnas)){\r\n                        continue;\r\n                    }\r\n                    \r\n                    if(tablero[i + casilla[0]][ j + casilla[1]].mina){\r\n                        numMinas++;\r\n                    }\r\n                }\r\n\r\n                tablero[i][j].minasAlrededor = numMinas;\r\n            }\r\n        }\r\n\r\n        return tablero;\r\n\r\n    }\r\n\r\n\r\n    cellStatus(board: Cell[][]){\r\n        for(let i = 0; i < board.length; i++){\r\n            for(let j = 0; j < board[i].length; j++){\r\n                if(board[i][j].mina){\r\n                    board[i][j].status = 'mine';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    changeDifficulty(difficulty: string) : [number, number, number]{\r\n\r\n        let rows, columns = 5;\r\n        let numberOfMines = 1;\r\n        if(difficulty == \"Easy\"){\r\n            rows = columns = 8;\r\n            numberOfMines = 10;\r\n        }\r\n        else if(difficulty == \"Medium\"){\r\n            rows = columns = 13;\r\n            numberOfMines = 20;\r\n        }\r\n        else if(difficulty == \"Hard\"){\r\n            rows = columns = 15;\r\n            numberOfMines = 40;\r\n        }\r\n        else{\r\n            rows = columns = 15;\r\n            numberOfMines = 90;\r\n        }\r\n\r\n\r\n        return [rows, columns, numberOfMines];\r\n    }\r\n\r\n\r\n    getDifficultys() : string[]\r\n    {\r\n        return [\"Easy\", \"Medium\", \"Hard\", \"Extreme\"];\r\n    }\r\n\r\n    checkCell(board: Cell[][], row: number, column: number, cellsGame: any, numberOfMines: number, gameEstate: GameState) : GameState{\r\n        \r\n        if(board[row][column].mina){\r\n            board[row][column].status = 'mine';\r\n            this.cellStatus(board);\r\n            return GameState.lose;\r\n        }\r\n        else if((cellsGame.cellsOpened) >= (cellsGame.cells - cellsGame.numberMines)){\r\n            return GameState.win;\r\n        }\r\n    \r\n        return GameState.playing;\r\n    }\r\n\r\n\r\n    validarRango(i: number, j: number, rows: number, columns: number) : boolean{\r\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    openCell(tablero: Cell[][],fila: number, columna: number, filas: number, columnas: number, casillas: any) : void {\r\n        if(!this.validarRango(fila, columna, filas, columnas) || tablero[fila][columna].status == 'open' || tablero[fila][columna].mina){\r\n            return;\r\n        }\r\n        else if(tablero[fila][columna].minasAlrededor != 0){\r\n            tablero[fila][columna].status = 'open';\r\n            casillas.cellsOpened += 1;\r\n        }\r\n        else if(tablero[fila][columna].minasAlrededor == 0){\r\n    \r\n            tablero[fila][columna].status = 'open';\r\n            casillas.cellsOpened += 1;\r\n            this.openCell(tablero, fila + 1, columna, filas, columnas, casillas);\r\n            this.openCell(tablero, fila, columna + 1, filas, columnas, casillas);\r\n            this.openCell(tablero, fila - 1, columna, filas, columnas, casillas);\r\n            this.openCell(tablero, fila, columna - 1, filas, columnas, casillas);\r\n            this.openCell(tablero, fila + 1, columna + 1, filas, columnas, casillas);\r\n            this.openCell(tablero, fila + 1, columna - 1, filas, columnas, casillas);\r\n            this.openCell(tablero, fila - 1, columna - 1, filas, columnas, casillas);\r\n            this.openCell(tablero, fila - 1, columna + 1, filas, columnas, casillas);\r\n            \r\n        }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}