{"ast":null,"code":"import { GameState } from \"../models/Game.enum\";\nexport class CellService {\n  buildBoard(rows, columns, numberOfMines) {\n    let board = [];\n    for (let i = 0; i < rows; i++) {\n      let rows = [];\n      for (let j = 0; j < columns; j++) {\n        let element = {\n          status: 'toOpen',\n          mine: false,\n          minasAlrededor: 0\n        };\n        rows.push(element);\n      }\n      board.push(rows);\n    }\n    this.putMines(numberOfMines, board, rows, columns);\n    this.GetMineProximity(board, rows, columns);\n    return board;\n  }\n  putMines(numberOfMines, board, rows, columns) {\n    let set = new Set();\n    let i = 0;\n    while (i < numberOfMines) {\n      let pairs = [Math.floor(Math.random() * rows), Math.floor(Math.random() * columns)];\n      if (!set.has(pairs) && !board[pairs[0]][pairs[1]].mina) {\n        set.add(pairs);\n        board[pairs[0]][pairs[1]].mina = true;\n        i++;\n      }\n    }\n    return board;\n  }\n  GetMineProximity(board, rows, columns) {\n    const CASILLAS_ADYACENTES = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let mines = 0;\n        for (const pair of CASILLAS_ADYACENTES) {\n          if (!this.isValid(i + pair[0], j + pair[1], rows, columns)) {\n            continue;\n          }\n          if (board[i + pair[0]][j + pair[1]].mina) {\n            mines++;\n          }\n        }\n        board[i][j].minasAlrededor = mines;\n      }\n    }\n    return board;\n  }\n  gameOver(board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j].mine) {\n          board[i][j].status = 'mine';\n        }\n      }\n    }\n  }\n  changeDifficulty(difficulty) {\n    let rows,\n      columns = 5;\n    let numberOfMines = 1;\n    if (difficulty == \"Easy\") {\n      rows = columns = 8;\n      numberOfMines = 10;\n    } else if (difficulty == \"Medium\") {\n      rows = columns = 13;\n      numberOfMines = 20;\n    } else if (difficulty == \"Hard\") {\n      rows = columns = 15;\n      numberOfMines = 40;\n    } else {\n      rows = columns = 15;\n      numberOfMines = 90;\n    }\n    return [rows, columns, numberOfMines];\n  }\n  getDifficultys() {\n    return [\"Easy\", \"Medium\", \"Hard\", \"Extreme\"];\n  }\n  checkCell(board, row, column, cellsGame, numberOfMines, gameEstate) {\n    if (board[row][column].mine) {\n      board[row][column].status = 'mine';\n      this.gameOver(board);\n      return GameState.lose;\n    } else if (cellsGame.cellsOpened >= cellsGame.cells - cellsGame.numberMines) {\n      return GameState.win;\n    }\n    return GameState.playing;\n  }\n  isValid(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  openCell(board, row, column, rows, columns, cellsGame, PnumberOfFlags) {\n    if (!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine) {\n      return;\n    } else if (board[row][column].mineProximity != 0) {\n      if (board[row][column].status == 'flag') {\n        PnumberOfFlags.flags += 1;\n      }\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n    } else if (board[row][column].mineProximity == 0) {\n      if (board[row][column].status == 'flag') {\n        PnumberOfFlags.flags += 1;\n      }\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n      this.openCell(board, row + 1, column, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row - 1, column, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row, column + 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row, column - 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row + 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row - 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row - 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row + 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\n    }\n  }\n  flag(cell) {\n    if (cell.status == 'toOpen') {\n      cell.status = 'flag';\n    } else if (cell.status == 'flag') {\n      cell.status = 'toOpen';\n    }\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,qBAAqB;AAG/C,OAAM,MAAOC,WAAW;EAEpBC,UAAU,CAACC,IAAY,EAAEC,OAAe,EAAEC,aAAqB;IAE3D,IAAIC,KAAK,GAAa,EAAE;IACxB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAC;MACzB,IAAIJ,IAAI,GAAW,EAAE;MACrB,KAAI,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAC;QAC9B,IAAIC,OAAO,GAAS;UAACC,MAAM,EAAE,QAAQ;UAAEC,IAAI,EAAE,KAAK;UAAEC,cAAc,EAAE;QAAC,CAAC;QACtET,IAAI,CAACU,IAAI,CAACJ,OAAO,CAAC;;MAEpBH,KAAK,CAACO,IAAI,CAACV,IAAI,CAAC;;IAIpB,IAAI,CAACW,QAAQ,CAACT,aAAa,EAAEC,KAAK,EAAEH,IAAI,EAAEC,OAAO,CAAC;IAClD,IAAI,CAACW,gBAAgB,CAACT,KAAK,EAAEH,IAAI,EAAEC,OAAO,CAAC;IAE3C,OAAOE,KAAK;EAChB;EAGAQ,QAAQ,CAACT,aAAqB,EAAEC,KAAe,EAAEH,IAAY,EAAEC,OAAe;IAC1E,IAAIY,GAAG,GAAG,IAAIC,GAAuB;IACrC,IAAIV,CAAC,GAAW,CAAC;IAEjB,OAAMA,CAAC,GAAGF,aAAa,EAAC;MACpB,IAAIa,KAAK,GAAqB,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAIlB,IAAK,CAAC,EAAEgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAIjB,OAAQ,CAAC,CAAC;MAEzG,IAAG,CAACY,GAAG,CAACM,GAAG,CAACJ,KAAK,CAAC,IAAI,CAACZ,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,EAAC;QAClDP,GAAG,CAACQ,GAAG,CAACN,KAAK,CAAC;QACdZ,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,GAAG,IAAI;QACrChB,CAAC,EAAE;;;IAIX,OAAOD,KAAK;EAChB;EAGAS,gBAAgB,CAACT,KAAe,EAAEH,IAAY,EAAEC,OAAe;IAE3D,MAAMqB,mBAAmB,GAAe,CACZ,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACR,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAClC;IAGD,KAAI,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAC;MACzB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAC;QAC5B,IAAIkB,KAAK,GAAW,CAAC;QACrB,KAAI,MAAMC,IAAI,IAAIF,mBAAmB,EAAC;UAClC,IAAG,CAAC,IAAI,CAACG,OAAO,CAACrB,CAAC,GAAGoB,IAAI,CAAC,CAAC,CAAC,EAAEnB,CAAC,GAAGmB,IAAI,CAAC,CAAC,CAAC,EAAExB,IAAI,EAAEC,OAAO,CAAC,EAAC;YACtD;;UAGJ,IAAGE,KAAK,CAACC,CAAC,GAAGoB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAEnB,CAAC,GAAGmB,IAAI,CAAC,CAAC,CAAC,CAAC,CAACJ,IAAI,EAAC;YACrCG,KAAK,EAAE;;;QAIfpB,KAAK,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACI,cAAc,GAAGc,KAAK;;;IAI1C,OAAOpB,KAAK;EAEhB;EAGAuB,QAAQ,CAACvB,KAAe;IACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACwB,MAAM,EAAEvB,CAAC,EAAE,EAAC;MACjC,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACC,CAAC,CAAC,CAACuB,MAAM,EAAEtB,CAAC,EAAE,EAAC;QACpC,IAAGF,KAAK,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACG,IAAI,EAAC;UAChBL,KAAK,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACE,MAAM,GAAG,MAAM;;;;EAI3C;EAGAqB,gBAAgB,CAACC,UAAkB;IAE/B,IAAI7B,IAAI;MAAEC,OAAO,GAAG,CAAC;IACrB,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAG2B,UAAU,IAAI,MAAM,EAAC;MACpB7B,IAAI,GAAGC,OAAO,GAAG,CAAC;MAClBC,aAAa,GAAG,EAAE;KACrB,MACI,IAAG2B,UAAU,IAAI,QAAQ,EAAC;MAC3B7B,IAAI,GAAGC,OAAO,GAAG,EAAE;MACnBC,aAAa,GAAG,EAAE;KACrB,MACI,IAAG2B,UAAU,IAAI,MAAM,EAAC;MACzB7B,IAAI,GAAGC,OAAO,GAAG,EAAE;MACnBC,aAAa,GAAG,EAAE;KACrB,MACG;MACAF,IAAI,GAAGC,OAAO,GAAG,EAAE;MACnBC,aAAa,GAAG,EAAE;;IAItB,OAAO,CAACF,IAAI,EAAEC,OAAO,EAAEC,aAAa,CAAC;EACzC;EAGA4B,cAAc;IAEV,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC;EAChD;EAEAC,SAAS,CAAC5B,KAAe,EAAE6B,GAAW,EAAEC,MAAc,EAAEC,SAAc,EAAEhC,aAAqB,EAAEiC,UAAqB;IAEhH,IAAGhC,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAACzB,IAAI,EAAC;MACvBL,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC1B,MAAM,GAAG,MAAM;MAClC,IAAI,CAACmB,QAAQ,CAACvB,KAAK,CAAC;MACpB,OAAON,SAAS,CAACuC,IAAI;KACxB,MACI,IAAIF,SAAS,CAACG,WAAW,IAAMH,SAAS,CAACI,KAAK,GAAGJ,SAAS,CAACK,WAAY,EAAC;MACzE,OAAO1C,SAAS,CAAC2C,GAAG;;IAGxB,OAAO3C,SAAS,CAAC4C,OAAO;EAC5B;EAGAhB,OAAO,CAACrB,CAAS,EAAEC,CAAS,EAAEL,IAAY,EAAEC,OAAe;IACvD,IAAIG,CAAC,GAAG,CAAC,IAAIC,CAAC,GAAG,CAAC,IAAMD,CAAC,IAAIJ,IAAI,IAAIK,CAAC,IAAIJ,OAAQ,EAAC;MAC/C,OAAO,KAAK;;IAGhB,OAAO,IAAI;EACf;EAEAyC,QAAQ,CAACvC,KAAe,EAAC6B,GAAW,EAAEC,MAAc,EAAEjC,IAAY,EAAEC,OAAe,EAAEiC,SAAc,EAAES,cAAmB;IACpH,IAAG,CAAC,IAAI,CAAClB,OAAO,CAACO,GAAG,EAAEC,MAAM,EAAEjC,IAAI,EAAEC,OAAO,CAAC,IAAIE,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC1B,MAAM,IAAI,MAAM,IAAIJ,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAACzB,IAAI,EAAC;MAC3G;KACH,MACI,IAAGL,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAACW,aAAa,IAAI,CAAC,EAAC;MAC1C,IAAGzC,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC1B,MAAM,IAAI,MAAM,EAAC;QACnCoC,cAAc,CAACE,KAAK,IAAI,CAAC;;MAE7B1C,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC1B,MAAM,GAAG,MAAM;MAClC2B,SAAS,CAACG,WAAW,IAAI,CAAC;KAC7B,MACI,IAAGlC,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAACW,aAAa,IAAI,CAAC,EAAC;MAE1C,IAAGzC,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC1B,MAAM,IAAI,MAAM,EAAC;QACnCoC,cAAc,CAACE,KAAK,IAAI,CAAC;;MAE7B1C,KAAK,CAAC6B,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC1B,MAAM,GAAG,MAAM;MAClC2B,SAAS,CAACG,WAAW,IAAI,CAAC;MAC1B,IAAI,CAACK,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,GAAG,CAAC,EAAEC,MAAM,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;MAC/E,IAAI,CAACD,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,GAAG,CAAC,EAAEC,MAAM,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;MAC/E,IAAI,CAACD,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;MAC/E,IAAI,CAACD,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;MAE/E,IAAI,CAACD,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;MACnF,IAAI,CAACD,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;MACnF,IAAI,CAACD,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;MACnF,IAAI,CAACD,QAAQ,CAACvC,KAAK,EAAE6B,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEjC,IAAI,EAAEC,OAAO,EAAEiC,SAAS,EAAES,cAAc,CAAC;;EAE3F;EAEAG,IAAI,CAACC,IAAU;IACX,IAAGA,IAAI,CAACxC,MAAM,IAAI,QAAQ,EAAC;MACvBwC,IAAI,CAACxC,MAAM,GAAG,MAAM;KACvB,MACI,IAAGwC,IAAI,CAACxC,MAAM,IAAI,MAAM,EAAC;MAC1BwC,IAAI,CAACxC,MAAM,GAAG,QAAQ;;EAE9B","names":["GameState","CellService","buildBoard","rows","columns","numberOfMines","board","i","j","element","status","mine","minasAlrededor","push","putMines","GetMineProximity","set","Set","pairs","Math","floor","random","has","mina","add","CASILLAS_ADYACENTES","mines","pair","isValid","gameOver","length","changeDifficulty","difficulty","getDifficultys","checkCell","row","column","cellsGame","gameEstate","lose","cellsOpened","cells","numberMines","win","playing","openCell","PnumberOfFlags","mineProximity","flags","flag","cell"],"sourceRoot":"","sources":["F:\\Diky\\Desktop\\Programacio II\\Buscaminas\\src\\app\\services\\Cell.service.ts"],"sourcesContent":["import { Cell } from \"../models/Cell\";\r\nimport { GameState } from \"../models/Game.enum\";\r\n\r\n\r\nexport class CellService{\r\n\r\n    buildBoard(rows: number, columns: number, numberOfMines: number) : Cell[][]{\r\n\r\n        let board: Cell[][] = []\r\n        for(let i = 0; i < rows; i++){\r\n            let rows: Cell[] = [];\r\n            for(let j = 0; j < columns; j++){\r\n              let element: Cell = {status: 'toOpen', mine: false, minasAlrededor: 0};\r\n              rows.push(element);\r\n            }\r\n            board.push(rows);\r\n        }\r\n\r\n\r\n        this.putMines(numberOfMines, board, rows, columns);\r\n        this.GetMineProximity(board, rows, columns);\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    putMines(numberOfMines: number, board: Cell[][], rows: number, columns: number) : Cell[][]{\r\n        let set = new Set<([number, number])>;\r\n        let i: number = 0;\r\n\r\n        while(i < numberOfMines){\r\n            let pairs: [number, number] = [Math.floor(Math.random() * (rows)), Math.floor(Math.random() * (columns))];\r\n\r\n            if(!set.has(pairs) && !board[pairs[0]][pairs[1]].mina){\r\n                set.add(pairs);\r\n                board[pairs[0]][pairs[1]].mina = true;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    GetMineProximity(board: Cell[][], rows: number, columns: number) : Cell[][]{\r\n        \r\n        const CASILLAS_ADYACENTES: number[][] = [\r\n                                    [1, 1],\r\n                                    [-1, -1],\r\n                                    [-1, 1],\r\n                                    [1, -1],\r\n                                    [1, 0],\r\n                                    [-1, 0],\r\n                                    [0, 1],\r\n                                    [0, -1]\r\n        ];\r\n\r\n        \r\n        for(let i = 0; i < rows; i++){\r\n            for(let j = 0; j < columns; j++){\r\n                let mines: number = 0;\r\n                for(const pair of CASILLAS_ADYACENTES){\r\n                    if(!this.isValid(i + pair[0], j + pair[1], rows, columns)){\r\n                        continue;\r\n                    }\r\n                    \r\n                    if(board[i + pair[0]][ j + pair[1]].mina){\r\n                        mines++;\r\n                    }\r\n                }\r\n\r\n                board[i][j].minasAlrededor = mines;\r\n            }\r\n        }\r\n\r\n        return board;\r\n\r\n    }\r\n\r\n\r\n    gameOver(board: Cell[][]){\r\n        for(let i = 0; i < board.length; i++){\r\n            for(let j = 0; j < board[i].length; j++){\r\n                if(board[i][j].mine){\r\n                    board[i][j].status = 'mine';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    changeDifficulty(difficulty: string) : [number, number, number]{\r\n\r\n        let rows, columns = 5;\r\n        let numberOfMines = 1;\r\n        if(difficulty == \"Easy\"){\r\n            rows = columns = 8;\r\n            numberOfMines = 10;\r\n        }\r\n        else if(difficulty == \"Medium\"){\r\n            rows = columns = 13;\r\n            numberOfMines = 20;\r\n        }\r\n        else if(difficulty == \"Hard\"){\r\n            rows = columns = 15;\r\n            numberOfMines = 40;\r\n        }\r\n        else{\r\n            rows = columns = 15;\r\n            numberOfMines = 90;\r\n        }\r\n\r\n\r\n        return [rows, columns, numberOfMines];\r\n    }\r\n\r\n\r\n    getDifficultys() : string[]\r\n    {\r\n        return [\"Easy\", \"Medium\", \"Hard\", \"Extreme\"];\r\n    }\r\n\r\n    checkCell(board: Cell[][], row: number, column: number, cellsGame: any, numberOfMines: number, gameEstate: GameState) : GameState{\r\n        \r\n        if(board[row][column].mine){\r\n            board[row][column].status = 'mine';\r\n            this.gameOver(board);\r\n            return GameState.lose;\r\n        }\r\n        else if((cellsGame.cellsOpened) >= (cellsGame.cells - cellsGame.numberMines)){\r\n            return GameState.win;\r\n        }\r\n    \r\n        return GameState.playing;\r\n    }\r\n\r\n\r\n    isValid(i: number, j: number, rows: number, columns: number) : boolean{\r\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    openCell(board: Cell[][],row: number, column: number, rows: number, columns: number, cellsGame: any, PnumberOfFlags: any) : void {\r\n        if(!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine){\r\n            return;\r\n        }\r\n        else if(board[row][column].mineProximity != 0){\r\n            if(board[row][column].status == 'flag'){\r\n                PnumberOfFlags.flags += 1;\r\n            }\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n        }\r\n        else if(board[row][column].mineProximity == 0){\r\n    \r\n            if(board[row][column].status == 'flag'){\r\n                PnumberOfFlags.flags += 1;\r\n            }\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n            this.openCell(board, row + 1, column, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row - 1, column, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row, column + 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row, column - 1, rows, columns, cellsGame, PnumberOfFlags);\r\n\r\n            this.openCell(board, row + 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row - 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row - 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row + 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\r\n        }\r\n    }\r\n\r\n    flag(cell: Cell) : void{\r\n        if(cell.status == 'toOpen'){\r\n            cell.status = 'flag';\r\n        }\r\n        else if(cell.status == 'flag'){\r\n            cell.status = 'toOpen';\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    \r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}