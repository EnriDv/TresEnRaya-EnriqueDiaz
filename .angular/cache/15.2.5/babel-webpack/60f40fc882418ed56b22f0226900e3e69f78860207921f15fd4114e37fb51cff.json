{"ast":null,"code":"import { GameState } from \"../models/Game.enum\";\nexport class CellService {\n  buildBoard(filas, columnas, numberOfMines) {\n    let tablero = [];\n    for (let i = 0; i < filas; i++) {\n      let fila = [];\n      for (let j = 0; j < columnas; j++) {\n        let celda = {\n          status: 'toOpen',\n          mina: false,\n          minasAlrededor: 0\n        };\n        fila.push(celda);\n      }\n      tablero.push(fila);\n    }\n    this.putMines(numberOfMines, tablero, filas, columnas);\n    this.GetMineProximity(tablero, filas, columnas);\n    return tablero;\n  }\n  putMines(numberOfMines, board, filas, columnas) {\n    let set = new Set();\n    let i = 0;\n    while (i < numberOfMines) {\n      let pairs = [Math.floor(Math.random() * filas), Math.floor(Math.random() * columnas)];\n      if (!set.has(pairs) && !board[pairs[0]][pairs[1]].mina) {\n        set.add(pairs);\n        board[pairs[0]][pairs[1]].mina = true;\n        i++;\n      }\n    }\n    return board;\n  }\n  GetMineProximity(tablero, filas, columnas) {\n    const Casillas = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (let i = 0; i < filas; i++) {\n      for (let j = 0; j < columnas; j++) {\n        let numMinas = 0;\n        for (const casilla of Casillas) {\n          if (!this.isValid(i + casilla[0], j + casilla[1], filas, columnas)) {\n            continue;\n          }\n          if (tablero[i + casilla[0]][j + casilla[1]].mina) {\n            numMinas++;\n          }\n        }\n        tablero[i][j].minasAlrededor = numMinas;\n      }\n    }\n    return tablero;\n  }\n  gameOver(board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j].mina) {\n          board[i][j].status = 'mine';\n        }\n      }\n    }\n  }\n  changeDifficulty(difficulty) {\n    let rows,\n      columns = 5;\n    let numberOfMines = 1;\n    if (difficulty == \"Easy\") {\n      rows = columns = 8;\n      numberOfMines = 10;\n    } else if (difficulty == \"Medium\") {\n      rows = columns = 13;\n      numberOfMines = 20;\n    } else if (difficulty == \"Hard\") {\n      rows = columns = 15;\n      numberOfMines = 40;\n    } else {\n      rows = columns = 15;\n      numberOfMines = 90;\n    }\n    return [rows, columns, numberOfMines];\n  }\n  getDifficultys() {\n    return [\"Easy\", \"Medium\", \"Hard\", \"Extreme\"];\n  }\n  checkCell(board, row, column, cellsGame, numberOfMines, gameEstate) {\n    if (board[row][column].mina) {\n      board[row][column].status = 'mine';\n      this.gameOver(board);\n      return GameState.lose;\n    } else if (cellsGame.cellsOpened >= cellsGame.cells - cellsGame.numberMines) {\n      return GameState.win;\n    }\n    return GameState.playing;\n  }\n  isValid(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  openCell(board, row, column, rows, columns, cellsGame, PnumberOfFlags) {\n    if (!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mina) {\n      return;\n    } else if (board[row][column].minasAlrededor != 0) {\n      if (board[row][column].status == 'flag') {\n        PnumberOfFlags.flags += 1;\n      }\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n    } else if (board[row][column].minasAlrededor == 0) {\n      if (board[row][column].status == 'flag') {\n        PnumberOfFlags.flags += 1;\n      }\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n      this.openCell(board, row + 1, column, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row - 1, column, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row, column + 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row, column - 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row + 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row - 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row - 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\n      this.openCell(board, row + 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\n    }\n  }\n  flag(cell) {\n    if (cell.status == 'toOpen') {\n      cell.status = 'flag';\n    } else if (cell.status == 'flag') {\n      cell.status = 'toOpen';\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["GameState","CellService","buildBoard","filas","columnas","numberOfMines","tablero","i","fila","j","celda","status","mina","minasAlrededor","push","putMines","GetMineProximity","board","set","Set","pairs","Math","floor","random","has","add","Casillas","numMinas","casilla","isValid","gameOver","length","changeDifficulty","difficulty","rows","columns","getDifficultys","checkCell","row","column","cellsGame","gameEstate","lose","cellsOpened","cells","numberMines","win","playing","openCell","PnumberOfFlags","flags","flag","cell"],"sourceRoot":"","sources":["F:\\Diky\\Desktop\\Programacio II\\Buscaminas\\src\\app\\services\\Cell.service.ts"],"sourcesContent":["import { Cell } from \"../models/Cell\";\r\nimport { GameState } from \"../models/Game.enum\";\r\n\r\n\r\nexport class CellService{\r\n\r\n    buildBoard(filas: number, columnas: number, numberOfMines: number) : Cell[][]{\r\n\r\n        let tablero: Cell[][] = []\r\n        for(let i = 0; i < filas; i++){\r\n            let fila: Cell[] = [];\r\n            for(let j = 0; j < columnas; j++){\r\n              let celda: Cell = {status: 'toOpen', mina: false, minasAlrededor: 0};\r\n              fila.push(celda);\r\n            }\r\n            tablero.push(fila);\r\n        }\r\n\r\n\r\n        this.putMines(numberOfMines, tablero, filas, columnas);\r\n        this.GetMineProximity(tablero, filas, columnas);\r\n\r\n        return tablero;\r\n    }\r\n\r\n\r\n    putMines(numberOfMines: number, board: Cell[][], filas: number, columnas: number) : Cell[][]{\r\n        let set = new Set<([number, number])>;\r\n        let i: number = 0;\r\n\r\n        while(i < numberOfMines){\r\n            let pairs: [number, number] = [Math.floor(Math.random() * (filas)), Math.floor(Math.random() * (columnas))];\r\n\r\n            if(!set.has(pairs) && !board[pairs[0]][pairs[1]].mina){\r\n                set.add(pairs);\r\n                board[pairs[0]][pairs[1]].mina = true;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    GetMineProximity(tablero: Cell[][], filas: number, columnas: number) : Cell[][]{\r\n        \r\n        const Casillas: number[][] = [\r\n                                    [1, 1],\r\n                                    [-1, -1],\r\n                                    [-1, 1],\r\n                                    [1, -1],\r\n                                    [1, 0],\r\n                                    [-1, 0],\r\n                                    [0, 1],\r\n                                    [0, -1]\r\n        ];\r\n\r\n        \r\n        for(let i = 0; i < filas; i++){\r\n            for(let j = 0; j < columnas; j++){\r\n                let numMinas: number = 0;\r\n                for(const casilla of Casillas){\r\n                    if(!this.isValid(i + casilla[0], j + casilla[1], filas, columnas)){\r\n                        continue;\r\n                    }\r\n                    \r\n                    if(tablero[i + casilla[0]][ j + casilla[1]].mina){\r\n                        numMinas++;\r\n                    }\r\n                }\r\n\r\n                tablero[i][j].minasAlrededor = numMinas;\r\n            }\r\n        }\r\n\r\n        return tablero;\r\n\r\n    }\r\n\r\n\r\n    gameOver(board: Cell[][]){\r\n        for(let i = 0; i < board.length; i++){\r\n            for(let j = 0; j < board[i].length; j++){\r\n                if(board[i][j].mina){\r\n                    board[i][j].status = 'mine';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    changeDifficulty(difficulty: string) : [number, number, number]{\r\n\r\n        let rows, columns = 5;\r\n        let numberOfMines = 1;\r\n        if(difficulty == \"Easy\"){\r\n            rows = columns = 8;\r\n            numberOfMines = 10;\r\n        }\r\n        else if(difficulty == \"Medium\"){\r\n            rows = columns = 13;\r\n            numberOfMines = 20;\r\n        }\r\n        else if(difficulty == \"Hard\"){\r\n            rows = columns = 15;\r\n            numberOfMines = 40;\r\n        }\r\n        else{\r\n            rows = columns = 15;\r\n            numberOfMines = 90;\r\n        }\r\n\r\n\r\n        return [rows, columns, numberOfMines];\r\n    }\r\n\r\n\r\n    getDifficultys() : string[]\r\n    {\r\n        return [\"Easy\", \"Medium\", \"Hard\", \"Extreme\"];\r\n    }\r\n\r\n    checkCell(board: Cell[][], row: number, column: number, cellsGame: any, numberOfMines: number, gameEstate: GameState) : GameState{\r\n        \r\n        if(board[row][column].mina){\r\n            board[row][column].status = 'mine';\r\n            this.gameOver(board);\r\n            return GameState.lose;\r\n        }\r\n        else if((cellsGame.cellsOpened) >= (cellsGame.cells - cellsGame.numberMines)){\r\n            return GameState.win;\r\n        }\r\n    \r\n        return GameState.playing;\r\n    }\r\n\r\n\r\n    isValid(i: number, j: number, rows: number, columns: number) : boolean{\r\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    openCell(board: Cell[][],row: number, column: number, rows: number, columns: number, cellsGame: any, PnumberOfFlags: any) : void {\r\n        if(!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mina){\r\n            return;\r\n        }\r\n        else if(board[row][column].minasAlrededor != 0){\r\n            if(board[row][column].status == 'flag'){\r\n                PnumberOfFlags.flags += 1;\r\n            }\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n        }\r\n        else if(board[row][column].minasAlrededor == 0){\r\n    \r\n            if(board[row][column].status == 'flag'){\r\n                PnumberOfFlags.flags += 1;\r\n            }\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n            this.openCell(board, row + 1, column, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row - 1, column, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row, column + 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row, column - 1, rows, columns, cellsGame, PnumberOfFlags);\r\n\r\n            this.openCell(board, row + 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row - 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row - 1, column + 1, rows, columns, cellsGame, PnumberOfFlags);\r\n            this.openCell(board, row + 1, column - 1, rows, columns, cellsGame, PnumberOfFlags);\r\n        }\r\n    }\r\n\r\n    flag(cell: Cell) : void{\r\n        if(cell.status == 'toOpen'){\r\n            cell.status = 'flag';\r\n        }\r\n        else if(cell.status == 'flag'){\r\n            cell.status = 'toOpen';\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    \r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}